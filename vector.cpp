#include "vector.h"

/*
		  _____                    _____            _____                    _____                    _____
		 /\    \                  /\    \          /\    \                  /\    \                  /\    \
		/::\    \                /::\____\        /::\    \                /::\    \                /::\    \
	   /::::\    \              /:::/    /       /::::\    \              /::::\    \              /::::\    \
	  /::::::\    \            /:::/    /       /::::::\    \            /::::::\    \            /::::::\    \
	 /:::/\:::\    \          /:::/    /       /:::/\:::\    \          /:::/\:::\    \          /:::/\:::\    \
	/:::/  \:::\    \        /:::/    /       /:::/__\:::\    \        /:::/__\:::\    \        /:::/__\:::\    \
   /:::/    \:::\    \      /:::/    /       /::::\   \:::\    \       \:::\   \:::\    \       \:::\   \:::\    \
  /:::/    / \:::\    \    /:::/    /       /::::::\   \:::\    \    ___\:::\   \:::\    \    ___\:::\   \:::\    \
 /:::/    /   \:::\    \  /:::/    /       /:::/\:::\   \:::\    \  /\   \:::\   \:::\    \  /\   \:::\   \:::\    \
/:::/____/     \:::\____\/:::/____/       /:::/  \:::\   \:::\____\/::\   \:::\   \:::\____\/::\   \:::\   \:::\____\
\:::\    \      \::/    /\:::\    \       \::/    \:::\  /:::/    /\:::\   \:::\   \::/    /\:::\   \:::\   \::/    /
 \:::\    \      \/____/  \:::\    \       \/____/ \:::\/:::/    /  \:::\   \:::\   \/____/  \:::\   \:::\   \/____/
  \:::\    \               \:::\    \               \::::::/    /    \:::\   \:::\    \       \:::\   \:::\    \
   \:::\    \               \:::\    \               \::::/    /      \:::\   \:::\____\       \:::\   \:::\____\
	\:::\    \               \:::\    \              /:::/    /        \:::\  /:::/    /        \:::\  /:::/    /
	 \:::\    \               \:::\    \            /:::/    /          \:::\/:::/    /          \:::\/:::/    /
	  \:::\    \               \:::\    \          /:::/    /            \::::::/    /            \::::::/    /
	   \:::\____\               \:::\____\        /:::/    /              \::::/    /              \::::/    /
		\::/    /                \::/    /        \::/    /                \::/    /                \::/    /
		 \/____/                  \/____/          \/____/                  \/____/                  \/____/

		  _____                    _____                    _____                _____                   _______                   _____
		 /\    \                  /\    \                  /\    \              /\    \                 /::\    \                 /\    \
		/::\____\                /::\    \                /::\    \            /::\    \               /::::\    \               /::\    \
	   /:::/    /               /::::\    \              /::::\    \           \:::\    \             /::::::\    \             /::::\    \
	  /:::/    /               /::::::\    \            /::::::\    \           \:::\    \           /::::::::\    \           /::::::\    \
	 /:::/    /               /:::/\:::\    \          /:::/\:::\    \           \:::\    \         /:::/~~\:::\    \         /:::/\:::\    \
	/:::/____/               /:::/__\:::\    \        /:::/  \:::\    \           \:::\    \       /:::/    \:::\    \       /:::/__\:::\    \
	|::|    |               /::::\   \:::\    \      /:::/    \:::\    \          /::::\    \     /:::/    / \:::\    \     /::::\   \:::\    \
	|::|    |     _____    /::::::\   \:::\    \    /:::/    / \:::\    \        /::::::\    \   /:::/____/   \:::\____\   /::::::\   \:::\    \
	|::|    |    /\    \  /:::/\:::\   \:::\    \  /:::/    /   \:::\    \      /:::/\:::\    \ |:::|    |     |:::|    | /:::/\:::\   \:::\____\
	|::|    |   /::\____\/:::/__\:::\   \:::\____\/:::/____/     \:::\____\    /:::/  \:::\____\|:::|____|     |:::|    |/:::/  \:::\   \:::|    |
	|::|    |  /:::/    /\:::\   \:::\   \::/    /\:::\    \      \::/    /   /:::/    \::/    / \:::\    \   /:::/    / \::/   |::::\  /:::|____|
	|::|    | /:::/    /  \:::\   \:::\   \/____/  \:::\    \      \/____/   /:::/    / \/____/   \:::\    \ /:::/    /   \/____|:::::\/:::/    /
	|::|____|/:::/    /    \:::\   \:::\    \       \:::\    \              /:::/    /             \:::\    /:::/    /          |:::::::::/    /
	|:::::::::::/    /      \:::\   \:::\____\       \:::\    \            /:::/    /               \:::\__/:::/    /           |::|\::::/    /
	\::::::::::/____/        \:::\   \::/    /        \:::\    \           \::/    /                 \::::::::/    /            |::| \::/____/
	 ~~~~~~~~~~               \:::\   \/____/          \:::\    \           \/____/                   \::::::/    /             |::|  ~|
							   \:::\    \               \:::\    \                                     \::::/    /              |::|   |
								\:::\____\               \:::\____\                                     \::/____/               \::|   |
								 \::/    /                \::/    /                                      ~~                      \:|   |
								  \/____/                  \/____/                                                                \|___|

*/

//  ____  __  __  ____  __    ____   ___ 
// (  _ \(  )(  )(  _ \(  )  (_  _) / __)
//  ) __/ )(__)(  ) _ < )(__  _)(_ ( (__ 
// (__)  (______)(____/(____)(____) \___)
//

// **********
// 函数名称：Vector
// 函数功能：从形参复制类
// **********
Vector::Vector(const Vector& _vec) {
	size = _vec.size;
	for (int i = 0; i < size; i++) { p_data[i] = _vec.p_data[i]; }
}

// **********
// 函数名称：Vector
// 函数功能：初始化类变量
// **********
Vector::Vector(int _size) {
	size = _size;
	p_data = new double[size];
}

// **********
// 函数名称：~Vector
// 函数功能：析构函数
// **********
Vector::~Vector() {
	delete[] p_data;
	p_data = NULL;
}

// **********
// 函数名称：init
// 函数功能：初始化p_data
// **********
void Vector::init(double value) {
	for (int i = 0; i < size; i++)
		p_data[i] = value;
}

// **********
// 函数名称：getsize
// 函数功能：返回 size 变量（向量维数）
// **********
int Vector::getsize() {
	return size;
}

// **********
// 函数名称：getdata
// 函数功能：返回 p_data[i] (向量第 i + 1 维的值)
// **********
double Vector::getdata(int i) {
	return p_data[i];
}

// **********
// 函数名称：data
// 函数功能：返回 p_data[i] (向量第 i + 1 维的值) 的引用
// **********
double& Vector::data(int i) {
	return p_data[i];
}

// **********
// 函数名称：DotProduct
// 函数功能：向量点乘，本向量点乘形参
// **********
double Vector::DotProduct(Vector& _vec) {
	double rt = 0.;
	if (size != _vec.size) {
		cout << "\033[33m\033[41m\033[01mERR:\033[0m" << "Unexcepted size of two vector." << endl;
		return rt;
	}
	else {
		for (int i = 0; i < size; i++)
			rt += p_data[i] * _vec.p_data[i];
		return rt;
	}
}

// **********
// 函数名称：print
// 函数功能：输出向量
// **********
void Vector::print() {
	cout << "\033[32moutput vector:\033[0m" << endl;
	for (int i = 0; i < size; i++)
		cout << p_data[i] << "  " << endl;
}
